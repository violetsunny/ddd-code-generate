package ${package}.${moduleName}.infrastructure.persistence.mybatis.repository.impl;

import com.baomidou.mybatisplus.extension.service.IService;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${package}.${moduleName}.domain.model.entity.${className};
import ${package}.${moduleName}.domain.model.types.${className}Id;
import ${package}.${moduleName}.domain.repository.${className}Repository;
import ${package}.${moduleName}.infrastructure.persistence.mybatis.convertor.${className}Convertor;
import ${package}.${moduleName}.infrastructure.persistence.mybatis.entity.${className}Do;
import ${package}.${moduleName}.infrastructure.persistence.mybatis.mapper.${className}Mapper;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ${comments}Repository实现类
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Repository
public class ${className}RepositoryImpl extends ServiceImpl<${className}Mapper, ${className}Do> implements ${className}Repository, IService<${className}Do> {

	@Resource
	private ${className}Convertor convertor;

	@Override
	public ${className} find(${className}Id id) {
		Map<String, Object> params = new HashMap<>();
		params.put("id", id.getId());
		${className}Do ${pathName}Do = baseMapper.queryEntity(params);
		if (${pathName}Do == null) {
			return null;
		}
		${className} ${pathName} = convertor.to${className}(${pathName}Do);
		return ${pathName};
	}

	@Override
	public boolean store(${className} ${pathName}) {
		${className}Do ${pathName}Do = convertor.from${className}(${pathName});
		boolean isStored = this.saveOrUpdate(${pathName}Do);
		return isStored;
	}

	@Override
	public boolean update(${className} ${pathName}) {
		${className}Do ${pathName}Do = convertor.from${className}(${pathName});
		boolean isUpdated = this.saveOrUpdate(${pathName}Do);
		return isUpdated;
	}

	@Override
	public boolean delete(List<${className}Id> ids) {
		List<String> tempIds = new ArrayList<>();
		ids.forEach(tempId -> {
			tempIds.add(tempId.getId());
		});
		return this.removeByIds(tempIds);
	}

}

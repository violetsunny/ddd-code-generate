package ${package}.${moduleName}.application.impl;


import ${package}.${moduleName}.application.${className}Service;
import ${package}.${moduleName}.domain.factory.${className}Factory;
import ${package}.${moduleName}.domain.model.entity.${className};
import ${package}.${moduleName}.domain.model.types.${className}Id;
import ${package}.${moduleName}.domain.repository.${className}Repository;
import ${package}.${moduleName}.domain.specification.${className}UpdateSpecification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;

/**
 * ${comments}ServiceImpl
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
public class ${className}ServiceImpl implements ${className}Service {

	@Resource
	private ${className}Repository ${pathName}Repository;
	@Resource
	private ${className}Factory ${pathName}Factory;

	@Override
	public boolean add(${className} ${pathName}) {
		return	${pathName}Repository.store(${pathName});
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public boolean update(${className} ${pathName}) {
		${className}UpdateSpecification ${pathName}UpdateSpecification = new ${className}UpdateSpecification();
		${pathName}UpdateSpecification.isSatisfiedBy(${pathName});
		return	${pathName}Repository.store(${pathName});
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public boolean delete(List<${className}Id> ids) {
		return	${pathName}Repository.delete(ids);
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public boolean disable(${className}Id id) {
		${className} ${pathName} = ${pathName}Repository.find(id);
		${pathName}.disable();
		${className}UpdateSpecification ${pathName}UpdateSpecification = new ${className}UpdateSpecification();
		${pathName}UpdateSpecification.isSatisfiedBy(${pathName});
		return	${pathName}Repository.update(${pathName});
	}
}

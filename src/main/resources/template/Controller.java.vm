package ${package}.${moduleName}.interfaces.web;


import top.kdla.framework.dto.SingleResponse;
import top.kdla.framework.dto.PageResponse;
import top.kdla.framework.validator.group.AddGroup;
import top.kdla.framework.validator.group.UpdateGroup;
import ${package}.${moduleName}.application.service.${className}QueryService;
import ${package}.${moduleName}.application.service.${className}ApplicationService;
import ${package}.${moduleName}.client.dto.${className}Dto;
import ${package}.${moduleName}.client.dto.command.${className}Command;
import ${package}.${moduleName}.client.dto.query.${className}PageQuery;
import ${package}.${moduleName}.application.convertor.${className}DtoConvertor;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
#if(${isFirst})
import ${package}.${moduleName}.interfaces.facade.${className}AllServiceFacade;
import ${package}.${moduleName}.client.dto.command.${className}AllCommand;
#end
import java.util.Arrays;
import java.util.Map;
import javax.annotation.Resource;


/**
 * ${comments}Controller
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(tags = " ${comments}管理")
@RestController
@RequestMapping("/${pathName}")
public class ${className}Controller {

    @Resource
    private ${className}ApplicationService ${pathName}ApplicationService;

    @Resource
    private  ${className}QueryService ${pathName}QueryService;

    @Resource
    private ${className}DtoConvertor  ${pathName}DtoConvertor;

    #if(${isFirst})

    @Resource
    private ${className}AllServiceFacade ${pathName}AllServiceFacade;
    /**
     * 全量保存
     */
    @RequestMapping("/saveall")
##    @RequiresPermissions("${moduleName}:${pathName}:save")
    public SingleResponse saveall(@RequestBody ${className}AllCommand ${pathName}AllCommand) {
        ValidatorUtils.validateEntity(${pathName}AllCommand, AddGroup.class);
        ${pathName}AllServiceFacade.saveAll(${pathName}AllCommand);
        return SingleResponse.buildSuccess();
    }
    #end

    /**
     * ${comments}分页查询
     */
    @ApiOperation("${comments}分页查询")
    @GetMapping("/list")
##    @RequiresPermissions("${moduleName}:${pathName}:list")
    public PageResponse<${className}Dto> list(${className}PageQuery ${pathName}PageQuery) {
        return ${pathName}QueryService.queryPage(${pathName}PageQuery);
    }

    /**
     * ${comments}信息
     */
    @ApiOperation("${comments}信息")
    @GetMapping("/info/{id}")
##    @RequiresPermissions("${moduleName}:${pathName}:info")
    public SingleResponse<${className}Dto> info(@PathVariable("id") String id) {
        return SingleResponse.buildSuccess(${pathName}QueryService.find(id));
    }

    /**
     * 保存${comments}
     */
    @ApiOperation("保存${comments}")
    @PostMapping("/save")
##    @RequiresPermissions("${moduleName}:${pathName}:save")
    public SingleResponse<Boolean> save(@Validated(AddGroup.class) @RequestBody ${className}Command ${pathName}Command) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.add(${pathName}Command));

    }

    /**
     * 修改${comments}
     */
    @ApiOperation("修改${comments}")
    @PostMapping("/update")
##    @RequiresPermissions("${moduleName}:${pathName}:update")
    public SingleResponse<Boolean> update(@Validated(UpdateGroup.class) @RequestBody ${className}Command ${pathName}Command) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.update(${pathName}Command));
    }

    /**
     * 删除${comments}
     */
    @ApiOperation("删除${comments}")
    @PostMapping("/delete")
##    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public SingleResponse<Boolean> delete(@RequestBody String[] ids) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.deleteBatch(Arrays.asList(ids)));
    }

    /**
     * 禁用${comments}
     */
    @ApiOperation("禁用${comments}")
    @PostMapping("/disable/{id}")
##    @RequiresPermissions("${moduleName}:${pathName}:disable")
    public SingleResponse<Boolean> disable(@PathVariable("id") String id) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.disable(id));
    }
}
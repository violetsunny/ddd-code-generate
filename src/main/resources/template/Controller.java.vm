package ${package}.${moduleName}.interfaces.web;


import top.kdla.framework.dto.SingleResponse;
import top.kdla.framework.dto.PageResponse;
import top.kdla.framework.dto.MultiResponse;
import top.kdla.framework.catchlog.CatchAndLog;
import top.kdla.framework.validator.group.AddGroup;
import top.kdla.framework.validator.group.UpdateGroup;
import ${package}.${moduleName}.application.service.${className}QueryService;
import ${package}.${moduleName}.application.service.${className}ApplicationService;
import ${package}.${moduleName}.client.dto.${className}Dto;
import ${package}.${moduleName}.client.dto.command.${className}Command;
import ${package}.${moduleName}.client.dto.query.${className}PageQuery;
import ${package}.${moduleName}.application.convertor.${className}DtoConvertor;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import lombok.extern.slf4j.Slf4j;
#if(${isFirst})
##import ${package}.${moduleName}.client.dto.command.${className}AllCommand;
#end
import java.util.*;
import javax.annotation.Resource;


/**
 * ${comments}Controller
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Tag(name = " ${comments}管理")
@RestController
@RequestMapping("/${pathName}")
@Slf4j
@CatchAndLog
public class ${className}Controller {

    @Resource
    private ${className}ApplicationService ${pathName}ApplicationService;
    @Resource
    private  ${className}QueryService ${pathName}QueryService;
    @Resource
    private ${className}DtoConvertor  ${pathName}DtoConvertor;

##    #if(${isFirst})
##
##    @Resource
##    private ${className}AllServiceFacade ${pathName}AllServiceFacade;
##    /**
##     * 全量保存
##     */
##    @RequestMapping("/saveall")
####    @RequiresPermissions("${moduleName}:${pathName}:save")
##    public SingleResponse saveall(@RequestBody ${className}AllCommand ${pathName}AllCommand) {
##        ValidatorUtils.validateEntity(${pathName}AllCommand, AddGroup.class);
##        ${pathName}AllServiceFacade.saveAll(${pathName}AllCommand);
##        return SingleResponse.buildSuccess();
##    }
##    #end

    /**
     * ${comments}分页查询
     */
    @Operation(summary="${comments}分页查询")
    @PostMapping("/page")
##    @RequiresPermissions("${moduleName}:${pathName}:list")
    public PageResponse<${className}Dto> page(@RequestBody ${className}PageQuery ${pathName}PageQuery) {
        return ${pathName}QueryService.queryPage(${pathName}PageQuery);
    }

    /**
     * ${comments}list查询
     */
    @Operation(summary="${comments}list查询")
    @PostMapping("/list")
        ##    @RequiresPermissions("${moduleName}:${pathName}:list")
    public MultiResponse<${className}Dto> list() {
        //TODO list query
        return MultiResponse.buildSuccess(null);
    }

    /**
     * ${comments}信息
     */
    @Operation(summary="${comments}信息")
    @GetMapping("/find/{id}")
##    @RequiresPermissions("${moduleName}:${pathName}:info")
    public SingleResponse<${className}Dto> findById(@PathVariable("id") Long id) {
        return SingleResponse.buildSuccess(${pathName}QueryService.findById(id));
    }

    /**
     * 保存${comments}
     */
    @Operation(summary="保存${comments}")
    @PostMapping("/save")
##    @RequiresPermissions("${moduleName}:${pathName}:save")
    public SingleResponse<Boolean> save(@Validated(AddGroup.class) @RequestBody ${className}Command ${pathName}Command) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.add(${pathName}Command));

    }

    /**
     * 修改${comments}
     */
    @Operation(summary="修改${comments}")
    @PostMapping("/update")
##    @RequiresPermissions("${moduleName}:${pathName}:update")
    public SingleResponse<Boolean> update(@Validated(UpdateGroup.class) @RequestBody ${className}Command ${pathName}Command) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.update(${pathName}Command));
    }

    /**
     * 删除${comments}
     */
    @Operation(summary="删除${comments}")
    @PostMapping("/delete")
##    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public SingleResponse<Boolean> delete(@RequestBody List<Long> ids) {
        return SingleResponse.buildSuccess(${pathName}ApplicationService.deleteBatch(ids));
    }

}
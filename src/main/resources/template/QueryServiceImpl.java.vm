package ${package}.${moduleName}.application.service.impl;


import cn.hutool.core.bean.BeanUtil;
import top.kdla.framework.dto.PageResponse;

import ${package}.${moduleName}.domain.model.types.${className}Id;
import ${package}.${moduleName}.domain.model.entity.${className};
import ${package}.${moduleName}.domain.repository.${className}Repository;
import ${package}.${moduleName}.application.service.${className}QueryService;
import ${package}.${moduleName}.application.convertor.${className}DtoConvertor;
import ${package}.${moduleName}.client.dto.${className}Dto;
import ${package}.${moduleName}.client.dto.query.${className}PageQuery;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * ${comments}QueryServiceImpl
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
public class ${className}QueryServiceImpl implements ${className}QueryService {

	@Resource
	private ${className}Repository ${pathName}Repository;

	@Resource
	private ${className}DtoConvertor dtoConvertor;


	@Override
	public PageResponse<${className}Dto> queryPage(${className}PageQuery pageQuery) {
		Map<String, Object> params = BeanUtil.beanToMap(pageQuery);
		PageResponse<${className}> page = ${pathName}Repository.queryPage(pageQuery, params);
		List<${className}Dto> dtoList = page.getData().stream().map(dtoConvertor::from${className}).collect(Collectors.toList());
		return PageResponse.of(dtoList, page.getTotalCount(), page.getPageSize(), page.getPageNum());
	}

	@Override
	public ${className}Dto findById(String id) {
		return dtoConvertor.from${className}(${pathName}Repository.findById(new ${className}Id(id)));
	}

}


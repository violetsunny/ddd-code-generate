package ${package}.${moduleName}.interfaces.facade;


import top.kdla.framework.catchlog.CatchAndLog;
import top.kdla.framework.dto.SingleResponse;
import top.kdla.framework.dto.PageResponse;
import top.kdla.framework.dto.MultiResponse;
import ${package}.${moduleName}.application.service.${className}QueryService;
import ${package}.${moduleName}.application.service.${className}ApplicationService;
import ${package}.${moduleName}.client.dto.${className}Dto;
import ${package}.${moduleName}.client.dto.command.${className}Command;
import ${package}.${moduleName}.client.dto.query.${className}PageQuery;
import ${package}.${moduleName}.client.facade.${className}ServiceFacade;
import ${package}.${moduleName}.application.convertor.${className}DtoConvertor;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;

import javax.annotation.Resource;
import java.util.*;

/**
 * ${comments}FacadeImpl
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Component
@Slf4j
@CatchAndLog
public class ${className}ServiceFacadeImpl implements ${className}ServiceFacade {

	@Resource
	private ${className}ApplicationService ${pathName}ApplicationService;

	@Resource
	private  ${className}QueryService ${pathName}QueryService;

	@Resource
	private ${className}DtoConvertor  ${pathName}DtoConvertor;


	/**
	 * ${comments}分页查询
	 */
	@Override
	public PageResponse<${className}Dto> page(${className}PageQuery ${pathName}PageQuery) {
		return ${pathName}QueryService.queryPage(${pathName}PageQuery);
	}

	/**
	 * ${comments}list查询
	 */
	@Override
	public MultiResponse<${className}Dto> list() {
		//TODO list query
		return MultiResponse.buildSuccess(null);
	}

	/**
	 * ${comments}信息
	 */
	@Override
	public SingleResponse<${className}Dto> findById(String id) {
		return SingleResponse.buildSuccess(${pathName}QueryService.findById(id));
	}

	/**
	 * 保存${comments}
	 */
	@Override
	public SingleResponse<Boolean> save(${className}Command ${pathName}Command) {
		return SingleResponse.buildSuccess(${pathName}ApplicationService.add(${pathName}Command));

	}

	/**
	 * 修改${comments}
	 */
	@Override
	public SingleResponse<Boolean> update( ${className}Command ${pathName}Command) {
		return SingleResponse.buildSuccess(${pathName}ApplicationService.update(${pathName}Command));
	}

	/**
	 * 删除${comments}
	 */
	@Override
	public SingleResponse<Boolean> delete(String[] ids) {
		return SingleResponse.buildSuccess(${pathName}ApplicationService.deleteBatch(Arrays.asList(ids)));
	}

}

